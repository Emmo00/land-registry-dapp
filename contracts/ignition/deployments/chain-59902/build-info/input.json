{
    "language": "Solidity",
    "sources": {
        "@openzeppelin/contracts/access/Ownable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes memory signature\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly (\"memory-safe\") {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
        },
        "contracts/Counter.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\ncontract Counter {\n    uint256 private _count;\n\n    constructor() {\n        _count = 0;\n    }\n\n    function increment() public {\n        _count += 1;\n    }\n\n    function decrement() public {\n        require(_count > 0, \"Counter: decrement overflow\");\n        _count -= 1;\n    }\n\n    function current() public view returns (uint256) {\n        return _count;\n    }\n}\n"
        },
        "contracts/LandRegistry.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {Counter} from \"./Counter.sol\";\n\ncontract LandRegistry is Ownable, ReentrancyGuard {\n    using ECDSA for bytes32;\n    Counter private _landIdCounter;\n\n    enum VerificationStatus {\n        Pending,\n        Approved,\n        Rejected\n    }\n\n    struct LandRecord {\n        uint256 id;\n        string ownerFullName;\n        string plotNumber;\n        uint256 landSize; // acre * 100000 (10e5)\n        string gpsCoordinates;\n        string encryptedTitleDeedHash;\n        VerificationStatus status;\n        string rejectionReason;\n        address owner;\n        uint256 timestamp;\n    }\n\n    mapping(uint256 => LandRecord) public lands;\n    mapping(address => uint256[]) public landIdsByOwner;\n    mapping(string => uint256) private plotNumberToId;\n    mapping(address => bool) public governmentOfficials;\n    mapping(bytes32 => uint256) private proofToLandId;\n    string public adminPublicKey;\n\n    event LandRegistered(\n        uint256 indexed id,\n        string plotNumber,\n        address indexed owner\n    );\n    event LandVerified(\n        uint256 indexed id,\n        string plotNumber,\n        address indexed official\n    );\n    event LandRejected(\n        uint256 indexed id,\n        string plotNumber,\n        string reason,\n        address indexed official\n    );\n    event ProofGenerated(\n        uint256 indexed id,\n        bytes32 proofHash,\n        address indexed owner\n    );\n    event ProofUsed(\n        uint256 indexed id,\n        bytes32 proofHash,\n        address indexed verifier\n    );\n    event AdminPublicKeyUpdated(string indexed newAdminPublicKey);\n    event OfficialAdded(address indexed official);\n    event OfficialRemoved(address indexed official);\n\n    modifier onlyOfficial() {\n        require(\n            governmentOfficials[msg.sender],\n            \"Not an authorized government official\"\n        );\n        _;\n    }\n\n    modifier onlyLandOwner(uint256 _landId) {\n        require(lands[_landId].owner == msg.sender, \"Not the landowner\");\n        _;\n    }\n\n    constructor(string memory _adminPublicKey) Ownable(msg.sender) {\n        adminPublicKey = _adminPublicKey; // Set the admin public key\n        _landIdCounter = new Counter(); // Initialize the counter\n        _landIdCounter.increment(); // Start land ID from 1\n        governmentOfficials[msg.sender] = true; // Add the contract deployer as an official\n    }\n\n    function setAdminPublicKey(\n        string memory _adminPublicKey\n    ) external onlyOwner {\n        adminPublicKey = _adminPublicKey;\n        emit AdminPublicKeyUpdated(_adminPublicKey);\n    }\n\n    function addOfficial(address _official) external onlyOwner {\n        governmentOfficials[_official] = true;\n        emit OfficialAdded(_official);\n    }\n\n    function removeOfficial(address _official) external onlyOwner {\n        governmentOfficials[_official] = false;\n        emit OfficialRemoved(_official);\n    }\n\n    function registerLand(\n        string memory _plotNumber,\n        uint256 _landSize,\n        string memory _gpsCoordinates,\n        string memory _encryptedTitleDeedHash,\n        string memory _ownerFullName\n    ) external nonReentrant {\n        require(\n            plotNumberToId[_plotNumber] == 0,\n            \"Plot number already registered\"\n        );\n\n        uint256 landId = _landIdCounter.current();\n\n        lands[landId] = LandRecord({\n            id: landId,\n            plotNumber: _plotNumber,\n            landSize: _landSize,\n            gpsCoordinates: _gpsCoordinates,\n            encryptedTitleDeedHash: _encryptedTitleDeedHash,\n            status: VerificationStatus.Pending,\n            rejectionReason: \"\",\n            owner: msg.sender,\n            ownerFullName: _ownerFullName,\n            timestamp: block.timestamp\n        });\n\n        _landIdCounter.increment();\n        plotNumberToId[_plotNumber] = landId;\n        landIdsByOwner[msg.sender].push(landId);\n\n        emit LandRegistered(landId, _plotNumber, msg.sender);\n    }\n\n    function getLandsByOwner(\n        address _owner\n    ) external view returns (LandRecord[] memory) {\n        uint256[] memory ownerLandIds = landIdsByOwner[_owner];\n\n        // load land record details\n        LandRecord[] memory ownerLands = new LandRecord[](ownerLandIds.length);\n        for (uint256 i = 0; i < ownerLandIds.length; i++) {\n            ownerLands[i] = lands[ownerLandIds[i]];\n        }\n        return ownerLands;\n    }\n\n    function getAllLands() external view returns (LandRecord[] memory) {\n        uint256 totalLands = _landIdCounter.current();\n        LandRecord[] memory allLands = new LandRecord[](totalLands);\n        for (uint256 i = 1; i <= totalLands; i++) {\n            allLands[i - 1] = lands[i];\n        }\n        return allLands;\n    }\n\n    function verifyLand(uint256 _landId) external onlyOfficial {\n        require(\n            lands[_landId].status == VerificationStatus.Pending,\n            \"Land record is not pending\"\n        );\n        lands[_landId].status = VerificationStatus.Approved;\n        emit LandVerified(_landId, lands[_landId].plotNumber, msg.sender);\n    }\n\n    function rejectLand(\n        uint256 _landId,\n        string memory _reason\n    ) external onlyOfficial {\n        require(\n            lands[_landId].status == VerificationStatus.Pending,\n            \"Land record is not pending\"\n        );\n        lands[_landId].status = VerificationStatus.Rejected;\n        lands[_landId].rejectionReason = _reason;\n        emit LandRejected(\n            _landId,\n            lands[_landId].plotNumber,\n            _reason,\n            msg.sender\n        );\n    }\n\n    function generateProof(\n        uint256 _landId\n    ) external onlyLandOwner(_landId) returns (bytes32) {\n        require(\n            lands[_landId].status == VerificationStatus.Approved,\n            \"Land must be approved\"\n        );\n        bytes32 proofHash = keccak256(\n            abi.encodePacked(block.timestamp, _landId, msg.sender)\n        );\n        proofToLandId[proofHash] = _landId;\n        emit ProofGenerated(_landId, proofHash, msg.sender);\n        return proofHash;\n    }\n\n    function verifyProof(bytes32 _proofHash) external {\n        uint256 landId = proofToLandId[_proofHash];\n        require(landId != 0, \"Invalid or already used proof\");\n        delete proofToLandId[_proofHash]; // Invalidate proof after use\n        emit ProofUsed(landId, _proofHash, msg.sender);\n    }\n\n    function getLandById(\n        uint256 _landId\n    ) external view returns (LandRecord memory) {\n        return lands[_landId];\n    }\n}\n"
        }
    },
    "settings": {
        "evmVersion": "paris",
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata"
                ],
                "": [
                    "ast"
                ]
            }
        }
    }
}